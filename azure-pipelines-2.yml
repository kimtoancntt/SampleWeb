trigger:
  branches:
    include:
      - main
  paths:
    include:
      - index.html
      - Dockerfile

variables:
  - group: github-credentials
  - group: acr-credentials
  - group: aks-config
  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'
  - name: imageRepository
    value: 'nginx-website'
  - name: acrServiceConnection
    value: 'acr-connection'
  - name: aksServiceConnection
    value: 'aks-connection'

stages:
# ==================================
# ðŸ”¹ STAGE 1: Build & Push Image
# ==================================
- stage: BuildAndPush
  displayName: "Build and Push Docker Image"
  jobs:
  - job: BuildDocker
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      displayName: 'Checkout Code'
      clean: true
      fetchDepth: 1

    - script: |
        echo "Build ID: $(Build.BuildId)"
        echo "Image: $(ACR_LOGIN_SERVER)/$(imageRepository):$(tag)"
        ls -lah
      displayName: 'Display Info'

    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: login
        containerRegistry: $(acrServiceConnection)

    - task: Docker@2
      displayName: 'Build Image'
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: |
          $(tag)
          latest
        arguments: '--label "build.id=$(Build.BuildId)"'

    - task: Docker@2
      displayName: 'Push to ACR'
      inputs:
        command: push
        repository: $(imageRepository)
        tags: |
          $(tag)
          latest

    - script: |
        echo "âœ… BUILD SUCCESSFUL"
        echo "Image: $(ACR_LOGIN_SERVER)/$(imageRepository):$(tag)"
      displayName: 'Build Summary'

# ==================================
# ðŸ”¹ STAGE 2: Deploy to AKS
# ==================================
- stage: DeployToAKS
  displayName: "Deploy to AKS"
  dependsOn: BuildAndPush
  jobs:
  - job: DeployK8s
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      displayName: 'Checkout Code'

    # Get AKS credentials dynamically
    - task: Kubernetes@1
      displayName: 'Connect to AKS Cluster'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: $(aksServiceConnection)
        azureResourceGroup: $(AZURE_RG)
        kubernetesCluster: $(AKS_CLUSTER)
        command: 'get'
        arguments: 'nodes'

    # Deploy app to AKS
    - task: KubernetesManifest@1
      displayName: 'Deploy to AKS'
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscription: $(aksServiceConnection)
        azureResourceGroup: $(AZURE_RG)
        kubernetesCluster: $(AKS_CLUSTER)
        namespace: $(KUBE_NAMESPACE)
        manifests: |
          $(Build.SourcesDirectory)/k8s/deployment.yaml
          $(Build.SourcesDirectory)/k8s/service.yaml
        containers: |
          $(ACR_LOGIN_SERVER)/$(imageRepository):$(tag)
